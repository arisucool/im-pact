name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get directory name
        shell: bash
        run: echo ::set-output name=dir_name::$(echo "${PWD##*/}")
        id: get_dir_name

      - name: Get git ref
        run: echo ::set-output name=git_ref::${GITHUB_REF#refs/*/}
        id: get_git_ref

      - id: docker-cache
        uses: actions/cache@v2
        with:
          path: /tmp/docker-cache/
          key: ${{ steps.get_git_ref.outputs.git_ref }}-${{ hashFiles('Dockerfile', 'package.json', 'packages/*/package.json') }}
          restore-keys: |
            ${{ steps.get_git_ref.outputs.git_ref }}-
            ${{ steps.get_git_ref.outputs.git_ref }}
            main-
            master-

      - name: Load a cache of docker image
        shell: bash
        run: |
          if [ -f /tmp/docker-cache/app.tar ]; then
            docker load -i /tmp/docker-cache/app.tar || true
          fi

      - name: Build docker image
        shell: bash
        run: |
          docker build --build-arg NODE_ENV=development --cache-from="${{ steps.get_dir_name.outputs.dir_name }}_app" --tag "${{ steps.get_dir_name.outputs.dir_name }}_app" .

      - name: Save docker image as a cache (background)
        shell: bash
        run: |
          mkdir -p /tmp/docker-cache/
          docker save -o /tmp/docker-cache/app.tar "${{ steps.get_dir_name.outputs.dir_name }}_app" &

      - name: Test
        shell: bash
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
        run: |
          # Prevent node_modules directory in Action and Tweet Filter modules from disappearing by volume mounting
          volumes=()
          for dir in $( ls -1 -d module_packages/* | grep -Po "(im-pact-)*(action|filter)-.*" ); do
          volumes+=( "--volume=/opt/app/module_packages/${dir}" )
          done
          volumes="$(IFS=" "; echo "${volumes[*]}")"

          # Prevent dependency container timeouts
          export DOCKER_CLIENT_TIMEOUT=120
          export COMPOSE_HTTP_TIMEOUT=120

          echo "Executing... docker-compose run --volume=${volumes} app npm run test-ci"
          docker-compose run ${volumes} app npm run test-ci | tee /tmp/npm-test-log.txt

      - name: Collect test reports
        if: ${{ always() }}
        shell: bash
        run: |
          container_id=`docker ps --filter "name=app_run_*" --format "{{ .ID }}" --last 1`

          # Copy the reports for server from the container
          docker cp ${container_id}:/opt/app/packages/server/test-report/coverage/ /tmp/ || echo "Could not collect server coverage report"
          if [ -d /tmp/coverage/ ]; then
            mkdir -p /tmp/coverages/server/
            mv /tmp/coverage/* /tmp/coverages/server/
            rm /tmp/coverage/ -R
          fi
          docker cp ${container_id}:/opt/app/packages/server/test-report/result/ /tmp/ || echo "Could not collect server coverage report"
          if [ -d /tmp/result/ ]; then
            mkdir -p /tmp/results/server/
            mv /tmp/result/* /tmp/results/server/
            rm /tmp/result/ -R
          fi

          # Copy the reports for client from the container
          docker cp ${container_id}:/opt/app/packages/client/test-report/coverage/ /tmp/ || echo "Could not collect client coverage report"
          if [ -d /tmp/coverage/ ]; then
            mkdir -p /tmp/coverages/client/
            mv /tmp/coverage/* /tmp/coverages/client/
            rm /tmp/coverage/ -R
          fi
          docker cp ${container_id}:/opt/app/packages/client/test-report/result/ /tmp/ || echo "Could not collect client coverage report"
          if [ -d /tmp/result/ ]; then
            mkdir -p /tmp/results/client/
            mv /tmp/result/* /tmp/results/client/
            rm /tmp/result/ -R
          fi

          # Copy the reports for Actions and Tweet Filters from the container

          for dir in $( ls -1 -d module_packages/* | grep -Po "(im-pact-)*(action|filter)-.*" ); do
            docker cp ${container_id}:/opt/app/module_packages/${dir}/test-report/coverage/ /tmp/ || echo "Could not collect ${dir} coverage report"
            if [ -d /tmp/coverage/ ]; then
              mkdir -p /tmp/coverages/${dir}/
              mv /tmp/coverage/* /tmp/coverages/${dir}/
              rm /tmp/coverage/ -R
            fi

            docker cp ${container_id}:/opt/app/module_packages/${dir}/test-report/result/ /tmp/ || echo "Could not collect ${dir} coverage report"
            if [ -d /tmp/result/ ]; then
              mkdir -p /tmp/results/${dir}/
              mv /tmp/result/* /tmp/results/${dir}/
              rm /tmp/result/ -R
            fi

          done

      - name: Upload test reports to Artifacts of GitHub Actions
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: |
            /tmp/npm-test-log.txt
            /tmp/coverages
            /tmp/results

      - name: Upload unit test result of client to GitHub Checks
        uses: mikepenz/action-junit-report@v2.1.1
        if: ${{ always() }}
        with:
          check_name: Client - Unit Test
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: true
          require_tests: true
          report_paths: '/tmp/results/client/*.xml'

      - name: Upload unit test result of server to GitHub Checks
        uses: mikepenz/action-junit-report@v2.1.1
        if: ${{ always() }}
        with:
          check_name: Server - Unit Test
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: true
          require_tests: true
          report_paths: '/tmp/results/server/*.xml'

      - name: Upload unit test result of actions to GitHub Checks
        uses: mikepenz/action-junit-report@v2.1.1
        if: ${{ always() }}
        with:
          check_name: Actions - Unit Test
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: true
          require_tests: true
          report_paths: |
            /tmp/results/action-*/*.xml
            /tmp/results/im-pact-action-*/*.xml

      - name: Upload unit test result of Tweet Filters to GitHub Checks
        uses: mikepenz/action-junit-report@v2.1.1
        if: ${{ always() }}
        with:
          check_name: Tweet Filters - Unit Test
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: true
          require_tests: true
          report_paths: |
            /tmp/results/filter-*/*.xml
            /tmp/results/im-pact-filter-*/*.xml

      - name: 'Upload unit test coverages to Codecov'
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        with:
          directory: /tmp/coverages/
          verbose: true
